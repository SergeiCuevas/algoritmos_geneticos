/*-------------------------------------------
ELITISMO
Implementación de la ley del más fuerte, se conserva al individul con la mejor aptitud para la siguiente generación
garantiza que las soluciones óptimas se conserven con el paso de las generaciones. Algoritmo extintivo
los hijos reemplzan a todo slos padres. Los padres, excepto el individuo elitista se extingue.

detecta a los 2 hijos con las peores aptitues
Detecta al padre con la mejor aptitud (elitista)
reemplaza  a dichos hijos con 2 copias elitista

Puede quedrse atorado en un optimo local y no en el global


---------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

// Definmos al individuo

// Estructura

// Constantes de la función y el algorítmo genético

#define POPULATION_SIZE 100
//Límites de la función
#define FX_LOWER_BOUND -20
#define FX_UPPER_BOUND 20
//PRECISIÓN
#define PRECISION 3

//Definición del individuo
typedef struct ind_t
{
    int* chromosome;
    double x;  //genes
    double fitness;   //aptitud
    int parents[2];   //padres del individuo
    //Dónde ocurre la mutación y la cruza de pares
    int mutation_place;
    int crossover_place;
}Individual;   //Para un solo individuo


//Poblaciones, elitista y la ruleta

Individual* parents;
Individual* offspring;
double* the_best;
double* roulette;

 
  //Variables útiles
unsigned chromosome_length;
double cossover_probability;
double mutation_probability;

// RESERVAR MEMORIA PARA LAS POBLACIONES

void allocateMemory() 
{
  unsigned required_bytes = sizeof(Individual) * POPULATION_SIZE;
  parents = (Individual*) malloc(required_bytes);
  offspring = (Individual*) malloc(required_bytes);

  //Reserva memoria para los cromosomas. Para lo padres y la descendencia

  int i;
  chromosome_length = ceil (log2((FX_UPPER_BOUND - FX_LOWER_BOUND)*pow(10, PRECISION))); //Largo del cromosoma
  required_bytes = chromosome_length * sizeof(int);

  for (i=0; i<POPULATION_SIZE;  i++){
    parents[i].chromosome = (int*) malloc(required_bytes);
    offspring[i].chromosome = (int*) malloc(required_bytes);
  }

  roulette = (double*)malloc(sizeof(double)) * POPULATION_SIZE;

}


/*--------------------------------------------
Devuelve un aleatorio sobre un intervalo
--------------------------------------------*/
double randomDouble(double a, double b)
{
   return (b-a)*(rand()/(double)RAND_MAX) + a;
}

//Simula lanzar una moneda al aire
int flip(double probability)
{
    if(randomDouble(0,1) < probability )
        return 0;
    else
        return 1;    
}


/*--------------------------------------------
INICIALIZAR PRIMERA GENERACIÓN
--------------------------------------------*/
void createFirstgeneration()
{
    int i;
    for(i=0; i<POPULATION_SIZE; i++){
        parents[i].x = RAND_MAX;
        parents[i].fitness = 0;
        parents[i].parents[0] = parents[i].parents[1] = -1;
        parents[i].mutation_place = parents[i].crossover_place = -1;

        //Generamos el cromosoma aliatoriamente
        int j;
        for(j=0; j<chromosome_length; j++)
            parents[i].chromosome[j] = flip(0.5);     



    }
}

/*--------------------------------------------
DECODIFICA EL GENOTIPO EN BINARIO A REAL Y APLICA AJUSTE AL RANGO
--------------------------------------------*/
doule binary2real(int* chromosome)
{
    int i;
    double aux = 0.0;
    for (i=chromosome_length-1; i>=0; i--) //hace el recorrido de derecha a izquierda
       aux += (double) pow(2, chromosome_length-i-1);
    return FX_LOWER_BOUND + ( (aux*(FX_UPPER_BOUND - FX_LOWER_BOUND))/(pow(2, chromosome_length)-1));   
}


/*--------------------------------------------
EVALUAR LA APTITUD DEL INDIVIDUO
--------------------------------------------*/

void evaluateTargetFunction(Individual* individual) //nos devuelve la variable con el ajuste al rango
{
    individual->x = binary2real(individual->chromosome);
    individual->fitness = 1/(pow(individual->x, 2)+0.001); // el inverso porque vamos a minimizar

}

/*--------------------------------------------
EVALUAR APTITUD DE POBLACIÓN
--------------------------------------------*/
void evaluatePopulation(Individual* population)
{
 int i;
 for(i=0; i<POPULATION_SIZE; i++)
    evaluateTargetfunction(&population[i]);   
}

/*--------------------------------------------
LLENA LA RULETA CON LA PROBABILIDAD DE CADA INDIVIDUO DE SER SELECCIONADO
--------------------------------------------*/
void updateRoulette(Individual* population)
{
    int i;
    double sum_fitness = 0.0;
    for(i=0; i<POPULATION_SIZE; i++)
        sum_fitness += population[i].fitness;
    for(i=0; i<POPULATION_SIZE; i++)
        roulette[i] = population[i].fitness / sum_fitness;
}

/*--------------------------------------------
SELECCIÓN POR RULETA
--------------------------------------------*/
unsigned rouletteWheelSelection()
{
    double r = randomDouble(0,1);
    double sum = 0.0;
    int i;
    for(i=0; sum<r; i++)
        sum += roulette[i];
    return i;

}
/*--------------------------------------------
RECOMBINACIÓN DE LOS PADRES SELECIONADOS
--------------------------------------------*/
void crossover (Individual* father, Individual* mother, Individual* child1, Individual* child2)
{
    int i;
    if(flip(crossover_probability)){
        unsigned p = (unsigned) randomDouble(1, chromosome_length-2);  //p es el pivote
        for(i=0; i<p; i++) {
            child1->chromosome[i] = father->chromosome[i];
            child2->chromosome[p+i] = mother->chromosome[i];
        }
        for(i=p+1; i<chromosome_length; i++){
            child1->chromosome[i] = mother->chromosome[i];
            child2->chromosome[i-p-1] = fathrt->chromosome[i];
        }
        child1->crossover_place = child2->crossover_place = p;
    }else {
        for(i=0; i<chromosome_length; i++){
            child1->chromosome[i] = father->chromosome[i];
            child2->chromosome[i] = mother->chromosome[i]; 
         }
         child1->crossover_place = child2->crossover_place = -1;

    }
}

/*--------------------------------------------
    REALIZA LA MUTACION         
--------------------------------------------*/
void mutation(Individual* indvidual)
{
    if(flip(mutation_probability)){
        unsigned p = (unsigned) randomDouble(0, chromosome_length);
        individual->chromosome[p] = 1 - individual->chromosome[p];
        individual->mutation_place = p;
    }   else{
            individual->mutation_place = -1;
    }
}


/*--------------------------------------------
ELITISMO (LEY DEL MAS FUERTE)
--------------------------------------------*/
void elitism()
{
    unsigned worst_child1, worst_child2;
    int i;
    worst_child1 = worst_child2 = 0;
    the_best = parents[0];

    for (i=0; i<POPULATION_SIZE; i++){
        if(offspring[i].fitness < offspring[worst_child1].fitness )
        worst_child1 = i;
        else if(offspring[i].fitness < offspring[worst_child2].fitness)
             worst_child2 = i;

        if(parents[i].fitness > the_best.fitness)
            the_best = parents[i];
    }

    offspring[worst_child1] = the_best;
    offspring[worst_child2] = the_best;

}

/*--------------------------------------------
FUNCIÓN PRINCIPAL
--------------------------------------------*/
  int main()
  {
    srand((log)time(NULL)); //semilla para generar aleatorios
    allocateMemory();
    createFirstgeneration();
    evaluatePopulation(parents);
    return 0;
  }

 



